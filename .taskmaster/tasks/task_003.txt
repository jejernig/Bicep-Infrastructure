# Task ID: 3
# Title: Implement Core Module: appService.bicep
# Status: pending
# Dependencies: 2
# Priority: medium
# Description: Create the App Service Bicep module with all necessary configurations and outputs.
# Details:
1. Create appService.bicep with parameters for name, SKU, configuration:
   ```bicep
   param appServiceName string
   param location string = resourceGroup().location
   param sku string = 'B1'
   param runtimeStack string = 'dotnet:6'
   param appSettings array = []
   
   resource appServicePlan 'Microsoft.Web/serverfarms@2021-03-01' = {
     name: '${appServiceName}-plan'
     location: location
     sku: {
       name: sku
     }
     properties: {
       reserved: contains(runtimeStack, 'linux')
     }
   }
   
   resource appService 'Microsoft.Web/sites@2021-03-01' = {
     name: appServiceName
     location: location
     properties: {
       serverFarmId: appServicePlan.id
       siteConfig: {
         appSettings: appSettings
         linuxFxVersion: contains(runtimeStack, 'linux') ? runtimeStack : null
       }
     }
   }
   ```
2. Add support for app settings from configuration
3. Implement slot support for production environments
4. Add managed identity configuration
5. Configure diagnostic settings
6. Expose outputs for hostname, principal ID, etc.

# Test Strategy:
1. Deploy to test environment with minimal configuration
2. Verify all properties are correctly applied
3. Test with different runtime stacks and SKUs
4. Validate managed identity creation and permissions
5. Test slot creation and configuration

# Subtasks:
## 1. Create basic App Service resource structure [pending]
### Dependencies: None
### Description: Implement the core App Service resource and its required properties in Bicep
### Details:
Create the main.bicep file for the App Service module with parameters for name, location, SKU, etc. Implement the basic App Service Plan and App Service resources with required properties. Include standard tags and naming convention support. Ensure proper resource relationships are established between the App Service and App Service Plan.

## 2. Implement App Settings and Configuration [pending]
### Dependencies: 3.1
### Description: Add support for configuring app settings, connection strings, and other configuration options
### Details:
Extend the module to support app settings as a parameter. Implement connection strings configuration. Add support for site configuration properties like always on, HTTP version, etc. Include CORS settings configuration. Ensure all configuration options are properly documented with parameter descriptions.

## 3. Add deployment slot functionality [pending]
### Dependencies: 3.1, 3.2
### Description: Implement support for creating and configuring deployment slots
### Details:
Add parameters to control deployment slot creation. Implement the deployment slot resource with proper configuration. Support slot-specific settings and configuration. Ensure proper relationship between slots and the main App Service. Add support for auto-swap settings if applicable.

## 4. Configure identity and diagnostics settings [pending]
### Dependencies: 3.1
### Description: Implement managed identity support and diagnostic settings for the App Service
### Details:
Add parameters for system-assigned and user-assigned managed identities. Implement diagnostic settings with configurable log categories and retention policies. Add support for sending logs to Log Analytics, Storage Account, or Event Hub. Ensure proper outputs are exposed for the identity information. Include proper documentation for all identity and diagnostic parameters.

